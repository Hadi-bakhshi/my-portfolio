{
    "aboutMe": {
        "description": [
            "Hi, I’m Hadi Bakhshi, a 25-year-old Software Engineer with a passion for creating systems that are as elegant as they are powerful. Over the past four years, I’ve honed my craft by designing and delivering scalable, reliable applications that solve real-world problems. Whether it’s building robust backend architectures, crafting intuitive, user-focused front-end experiences, optimizing performance, or tackling complex challenges head-on, I’m driven by the desire to deliver impactful solutions that exceed expectations.",
            "What sets me apart is my dedication to continuous improvement and innovation. I believe great software is built not just with technical skill but with curiosity, creativity, and a willingness to adapt. This mindset has pushed me to explore new approaches, refine my expertise, and embrace opportunities to grow with every project I take on.",
            "At the heart of my work is a commitment to quality and collaboration. I thrive in dynamic environments where I can contribute to meaningful projects, share ideas, and work alongside talented teams to bring ambitious ideas to life. For me, software engineering isn’t just about writing code—it’s about crafting solutions that make a difference.",
            "If you’re looking for someone who can combine technical expertise with a forward-thinking approach, let’s connect. I’m excited to take on new challenges, create impactful solutions, and continue pushing the boundaries of what’s possible."
        ]
    },
    "skills": {
        "technical": [
            {
                "id": 1,
                "category": "Programming Language",
                "categoryId": 1,
                "name": "C#",
                "tag": "csharp"
            },
            {
                "id": 2,
                "category": "Programming Language",
                "categoryId": 1,
                "name": "JavaScript",
                "tag": "js"
            },
            {
                "id": 3,
                "category": "Programming Language",
                "categoryId": 1,
                "name": "TypeScript",
                "tag": "ts"
            },
            {
                "id": 50,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": ".NET",
                "tag": "dotnet"
            },
            {
                "id": 4,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "ASP.NET Core",
                "tag": "aspnetcore"
            },
            {
                "id": 5,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "EF Core",
                "tag": "efcore"
            },
            {
                "id": 6,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "Dapper",
                "tag": "dapper"
            },
            {
                "id": 51,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "MediatR",
                "tag": "mediatr"
            },
            {
                "id": 7,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "NodeJS",
                "tag": "node"
            },
            {
                "id": 8,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "ExpressJS",
                "tag": "express"
            },
            {
                "id": 9,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "NestJS",
                "tag": "nest"
            },
            {
                "id": 10,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "Prisma",
                "tag": "prisma"
            },
            {
                "id": 11,
                "category": "Back-end Development",
                "categoryId": 2,
                "name": "TypeORM",
                "tag": "typeorm"
            },
            {
                "id": 12,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "HTML",
                "tag": "html"
            },
            {
                "id": 13,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "CSS",
                "tag": "css"
            },
            {
                "id": 14,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "SASS",
                "tag": "sass"
            },
            {
                "id": 15,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "TailwindCSS",
                "tag": "tailwind"
            },
            {
                "id": 16,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "ReactJS",
                "tag": "react"
            },
            {
                "id": 17,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "NextJS",
                "tag": "next"
            },
            {
                "id": 18,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Material-UI",
                "tag": "mui"
            },
            {
                "id": 19,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Redux",
                "tag": "redux"
            },
            {
                "id": 20,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Redux Toolkit",
                "tag": "redux"
            },
            {
                "id": 21,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Redux-Saga",
                "tag": "reduxsaga"
            },
            {
                "id": 22,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Next-UI",
                "tag": "nextui"
            },
            {
                "id": 23,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Zustand",
                "tag": "zustand"
            },
            {
                "id": 24,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Jotai",
                "tag": "jotai"
            },
            {
                "id": 25,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "Formik",
                "tag": "formik"
            },
            {
                "id": 26,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "React Hook Form",
                "tag": "rhf"
            },
            {
                "id": 27,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "TanStack Query",
                "tag": "tq"
            },
            {
                "id": 28,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "RTK Query",
                "tag": "redux"
            },
            {
                "id": 29,
                "category": "Front-end Development",
                "categoryId": 3,
                "name": "React Router Dom",
                "tag": "rrd"
            },
            {
                "id": 30,
                "category": "Database Management",
                "categoryId": 4,
                "name": "SQL",
                "tag": "sql"
            },
            {
                "id": 31,
                "category": "Database Management",
                "categoryId": 4,
                "name": "SQL Server",
                "tag": "mssql"
            },
            {
                "id": 32,
                "category": "Database Management",
                "categoryId": 4,
                "name": "Postgre",
                "tag": "postgre"
            },
            {
                "id": 33,
                "category": "Database Management",
                "categoryId": 4,
                "name": "Redis",
                "tag": "redis"
            },
            {
                "id": 34,
                "category": "Database Management",
                "categoryId": 4,
                "name": "MongoDB",
                "tag": "mongodb"
            },
            {
                "id": 35,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Git",
                "tag": "git"
            },
            {
                "id": 36,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "GitHub Actions",
                "tag": "githubactions"
            },
            {
                "id": 37,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Docker",
                "tag": "docker"
            },
            {
                "id": 38,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Nginx",
                "tag": "nginx"
            },
            {
                "id": 39,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Linux",
                "tag": "linux"
            },
            {
                "id": 2002,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "SIP.js/WebRTC",
                "tag": "sip"
            },
            {
                "id": 40,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Monorepo Management",
                "tag": "monorepo"
            },
            {
                "id": 41,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "UI/UX Design",
                "tag": "uud"
            },
            {
                "id": 49,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Figma",
                "tag": "figma"
            },
            {
                "id": 47,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "SCRUM",
                "tag": "scrum"
            },
            {
                "id": 48,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Jira",
                "tag": "jira"
            },
            {
                "id": 2005,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Vite",
                "tag": "vite"
            },
            {
                "id": 2006,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "Rollup.js",
                "tag": "rollup"
            },
            {
                "id": 2007,
                "category": "DevOps, Infrastructure & Workflow Automation",
                "categoryId": 5,
                "name": "NPM Package",
                "tag": "npm"
            },
            {
                "id": 42,
                "category": "Architectural & Design Patterns",
                "categoryId": 6,
                "name": "Clean Architecture",
                "tag": "cleanarch"
            },
            {
                "id": 43,
                "category": "Architectural & Design Patterns",
                "categoryId": 6,
                "name": "Vertical Slice",
                "tag": "verticalslice"
            },
            {
                "id": 44,
                "category": "Architectural & Design Patterns",
                "categoryId": 6,
                "name": "Modular Monolith",
                "tag": "modularmonolith"
            },
            {
                "id": 45,
                "category": "Architectural & Design Patterns",
                "categoryId": 6,
                "name": "Microservices",
                "tag": "microservices"
            },
            {
                "id": 46,
                "category": "Architectural & Design Patterns",
                "categoryId": 6,
                "name": "SOLID Principles",
                "tag": "solidprinciples"
            }
        ],
        "soft": [
            {
                "id": 849,
                "caption": "Teamwork",
                "borderRadius": "16% 84% 51% 49% / 39% 45% 55% 61%",
                "bgColor": "#E5D9F2",
                "color": "#222831"
            },
            {
                "id": 850,
                "caption": "R&D",
                "borderRadius": "50% 50% 51% 49% / 30% 29% 71% 70%",
                "bgColor": "#FDFFAE",
                "color": "#222831"
            },
            {
                "id": 851,
                "caption": "Problem Solving",
                "borderRadius": "54% 46% 81% 19% / 52% 48% 52% 48%",
                "bgColor": "#B0D9B1",
                "color": "#222831"
            },
            {
                "id": 852,
                "caption": "Teaching",
                "borderRadius": "50% 50% 51% 49% / 74% 77% 23% 26%",
                "bgColor": "#C6E7FF",
                "color": "#222831"
            },
            {
                "id": 853,
                "caption": "Communication",
                "borderRadius": "86% 14% 25% 75% / 45% 43% 57% 55%",
                "bgColor": "#FF9B9B",
                "color": "#222831"
            },
            {
                "id": 854,
                "caption": "leadership",
                "borderRadius": "38% 62% 52% 48% / 51% 30% 70% 49%",
                "bgColor": "#F9F9F9",
                "color": "#222831"
            },
            {
                "id": 855,
                "caption": "Project management",
                "borderRadius": "92% 8% 49% 51% / 51% 30% 70% 49%",
                "bgColor": "#FFCF9D",
                "color": "#222831"
            },
            {
                "id": 856,
                "caption": "Humility",
                "borderRadius": "81% 19% 59% 41% / 70% 72% 28% 30%",
                "bgColor": "#FEFBD8",
                "color": "#222831"
            },
            {
                "id": 857,
                "caption": "Learning agility",
                "borderRadius": "38% 62% 59% 41% / 70% 34% 66% 30%",
                "bgColor": "#EED3D9",
                "color": "#222831"
            },
            {
                "id": 858,
                "caption": "Innovation",
                "borderRadius": "10% 90% 31% 69% / 70% 50% 50% 30%",
                "bgColor": "#E1AFD1",
                "color": "#222831"
            },
            {
                "id": 859,
                "caption": "Creativity",
                "borderRadius": "92% 8% 90% 10% / 63% 68% 32% 37%",
                "bgColor": "#C2DEDC",
                "color": "#222831"
            }
        ]
    },
    "experiences": {
        "work": [
            {
                "id": 89,
                "companyName": "ReLOOQ",
                "role": "Software engineer",
                "detail": {
                    "startDate": "Mar 2023",
                    "endDate": "",
                    "achievements": [
                        "Enhanced performance and scalability by 20% through leading the development and maintenance of critical back-end systems using ASP.NET Core.",
                        "Improved code quality and scalability by implementing clean architecture principles, design patterns, and best practices.",
                        "Boosted data manipulation speed by optimizing SQL query performance and database structure.",
                        "Led system design and architecture for complex backend services, ensuring scalability, reliability, and maintainability across multiple projects.",
                        "Streamlined development workflows by introducing minimal APIs, reducing complexity in service design.",
                        "Designed and developed efficient database systems using a database-first approach, SQL Server stored procedures, and thoughtful database model design for dashboard projects.",
                        "Increased API efficiency by 30% through refactoring projects and applying REST API best practices and performance optimization."
                    ],
                    "location": "Iran, Tehran"
                }
            },
            {
                "id": 90,
                "companyName": "Behinekavan Keyfiat",
                "role": "Full-Stack Developer",
                "detail": {
                    "startDate": "Oct 2022",
                    "endDate": "Mar 2023",
                    "achievements": [
                        "Designed and developed internal web applications using Next.js, React.js, and Node.js, improving operational efficiency by 12% through streamlined workflows and faster processing times.",
                        "Advocated Agile methodologies, leading the team through the development lifecycle with iterative feedback and continuous improvement.",
                        "Mentored junior developers, providing insightful code reviews and fostering a collaborative, growth-focused environment.",
                        "Built secure and performant RESTful APIs, enabling efficient data exchange between frontend and backend systems.",
                        "Implemented PDF and Excel generation features for inspection applications using Express.js, Puppeteer, and ExcelJS, ensuring accurate reporting and data handling.",
                        "Improved application security, applying best practices in encryption, authentication, and data protection.",
                        "Optimized database interactions using Nest.js, Prisma ORM, and MSSQL, enhancing performance and reducing query response times.",
                        "Deployed and managed applications on servers, securing deployments with SSL certificates and configuring Nginx for optimized and secure web delivery.",
                        "Led UI/UX design efforts, collaborating with frontend teams to create intuitive interfaces following Material design principles."
                    ],
                    "location": "Iran, Tehran"
                }
            },
            {
                "id": 91,
                "companyName": "Behinekavan Keyfiat",
                "role": "Front-end Developer",
                "detail": {
                    "startDate": "May 2022",
                    "endDate": "Oct 2022",
                    "achievements": [
                        "Developed dynamic, database-driven dashboards and app interfaces for car inspection applications, improving sales and post-sale service efficiency using React, Vite, Material UI, and SASS.",
                        "Collaborated closely with back-end developers to integrate front-end components, ensuring seamless data synchronization and a cohesive user experience across dashboards.",
                        "Delivered high-quality code while adhering to deadlines, contributing to project success in a Scrum-based environment.",
                        "Engineered optimized web pages and UI components, focusing on intuitive interactions and data visualization within interactive dashboards for the car inspection app.",
                        "Implemented robust testing strategies, including code reviews and comprehensive test coverage, which significantly improved software quality and enhanced user satisfaction."
                    ],
                    "location": "Iran, Tehran"
                }
            },
            {
                "id": 92,
                "companyName": "Freelance",
                "role": "React Developer",
                "detail": {
                    "startDate": "Jan 2020",
                    "endDate": "Mar 2022",
                    "achievements": [
                        "Developed and optimized key components for the user interface, improving usability and contributing to a smoother user experience across the application.",
                        "Ensured full responsiveness across devices, particularly mobile and tablet, leading to a 15% improvement in mobile accessibility and user interaction.",
                        "Resolved cross-device compatibility issues, ensuring seamless functionality across platforms using React and CSS pre-processors.",
                        "Improved state management by implementing Redux and Context, enhancing scalability and reducing state-related issues by 20%.",
                        "Integrated APIs with Axios for efficient data exchange, supporting reliable data-driven functionality.",
                        "Prioritized a user-centric approach to component design and page optimization, improving overall user satisfaction and engagement."
                    ],
                    "location": "Iran, Tehran / US, North Carolina, Cary (Remote)"
                }
            }
        ],
        "education": [
            {
                "id": 90,
                "universityName": "University of Applied Science and Technology",
                "degree": "Bachelor of English Translation",
                "detail": {
                    "startDate": "2020 Oct",
                    "endDate": "2023 Aug"
                }
            }
        ]
    },
    "projects": [
        {
            "id": 85,
            "projectName": "Survey Nexus",
            "description": "Survey Nexus is a versatile package designed to handle any survey or questionnaire, offering a wide range of features including question creation, validation, conditions, logic, and quotas. The core of the package is framework-agnostic, ensuring that it can be easily integrated with various platforms. The system is built with several design patterns, such as builder, factory, observer, and state patterns, to ensure flexibility and scalability. The package includes a UI component that integrates seamlessly with React.js, providing a user-friendly interface for creating and managing surveys. To efficiently manage the development and deployment of the package, we adopted a monorepo strategy and used Turborepo to streamline the process. This architecture allows for easy maintenance and scaling. I played a key role in the design and implementation of the system, contributing to both the architecture and integration of design patterns. Survey Nexus is a highly scalable solution that can meet the needs of companies worldwide, and I believe it has the potential to be a leading product in the survey management space.",
            "summary": "A comprehensive solution designed to handle all aspects of surveys and questionnaires.it provides a flexible and scalable way to design and manage surveys. The package is built to meet the needs of companies worldwide, offering a powerful and easy-to-use tool for managing complex survey processes.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "Typescript",
                    "tag": "ts"
                },
                {
                    "name": "React.js",
                    "tag": "react"
                },
                {
                    "name": "Jotai",
                    "tag": "jotai"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "Design Patterns",
                    "tag": ""
                },
                {
                    "name": "Monorepo",
                    "tag": ""
                },
                {
                    "name": "Turborepo",
                    "tag": ""
                }
            ]
        },
        {
            "id": 84,
            "projectName": "Retail Audit",
            "description": "Retail Audit is a comprehensive application designed to streamline the retail audit process for businesses requesting audits of their products. The system allows auditors to manage product audits by adding products, checking their barcodes, and creating code-books. Admins can configure general questions as well as specific questions related to individual products, enabling a flexible and tailored auditing experience. The app also features robust reporting capabilities, allowing admins to generate detailed audit reports and upload or download code-books as needed. My contributions to the project were centered around the front-end architecture design, ensuring the user interface followed global best practices to provide auditors with the best possible experience. I also played a significant role in the database design, ensuring efficient storage and retrieval of audit data. Additionally, I helped implement the back-end APIs to handle the communication between the front-end and database, making sure the entire system functioned seamlessly. The goal was to create a streamlined, intuitive auditing process that meets the needs of both auditors and admins while maintaining performance and scalability.",
            "summary": "Retail Audit is an application developed for managing retail audits, allowing admins to handle product audits, create code-books, and generate detailed reports. Auditors can check product barcodes and answer general or product-specific questions.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "C#",
                    "tag": "csharp"
                },
                {
                    "name": "ASP.NET Core",
                    "tag": "aspnetcore"
                },
                {
                    "name": "EF Core",
                    "tag": "efcore"
                },
                {
                    "name": "Dapper",
                    "tag": "dapper"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "React.js",
                    "tag": "react"
                },
                {
                    "name": "Next.js",
                    "tag": "next"
                },
                {
                    "name": "Redux Toolkit",
                    "tag": "redux"
                },
                {
                    "name": "Tanstack Query",
                    "tag": "tq"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "Fluent Validation",
                    "tag": ""
                },
                {
                    "name": "Mapster",
                    "tag": ""
                },
                {
                    "name": "Serilog",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                }
            ]
        },
        {
            "id": 83,
            "projectName": "CAPI",
            "description": "CAPI is an application designed to facilitate the process of conducting surveys, with a strong focus on real-time voice recording, location tracking, and efficient survey management. Interviewers use the app to ask questions and capture responses, while the system tracks their location and records audio for future reference. The application also includes an admin panel where administrators can create surveys, set conditions and logic, manage quotas, and assign specific tasks to interviewers based on predefined criteria. As a key contributor, I played an important role in both the front-end and back-end development. I helped design the user interface to ensure a seamless experience for interviewers while focusing on optimizing the performance of features like location tracking and voice recording. On the back-end, I contributed to building the server-side logic to handle data efficiently, ensuring that all survey responses were stored securely and processed correctly. The application was designed to be intuitive for both the interviewers using it on the field and the admins managing the system, with a focus on reliability and performance at all stages of the process.",
            "summary": "CAPI is an app for conducting surveys with features like voice recording, location tracking, and real-time survey management. Admins can create surveys, set conditions, and manage quotas. I contributed to both the front-end and back-end design and development, ensuring a smooth user experience and high performance.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "C#",
                    "tag": "csharp"
                },
                {
                    "name": "ASP.NET Core",
                    "tag": "aspnetcore"
                },
                {
                    "name": "EF Core",
                    "tag": "efcore"
                },
                {
                    "name": "Dapper",
                    "tag": "dapper"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "React.js",
                    "tag": "react"
                },
                {
                    "name": "Next.js",
                    "tag": "next"
                },
                {
                    "name": "Redux Toolkit",
                    "tag": "redux"
                },
                {
                    "name": "Tanstack Query",
                    "tag": "tq"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "Fluent Validation",
                    "tag": ""
                },
                {
                    "name": "Mapster",
                    "tag": ""
                },
                {
                    "name": "Serilog",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                }
            ]
        },
        {
            "id": 82,
            "projectName": "Chabok Application",
            "description": "Chabok is an innovative application that connects and integrates diverse organizational systems into a unified platform, offering a streamlined experience for employees, managers, and executives. Whether it's submitting HR requests like leave applications and mission declarations or accessing financial information such as payslips, users no longer need multiple applications. Chabok consolidates all services in one place, tailored to meet the unique needs of each organization. The app's modular design supports dynamic system extensions, allowing organizations to request and implement new modules or connect to any existing systems seamlessly. This flexibility makes it suitable for organizations of any size, accommodating roles ranging from employees to CEOs and board members. As a key contributor, I led the design and implementation of modules, database architecture, and back-end functionality. We opted for SQL Server and Redis to handle data storage and caching, ensuring high performance and scalability. Implementing efficient data retrieval was a priority, so we developed flexible patterns that adapt to various system requirements, switching between database and back-end approaches as needed. The application was developed using ASP.NET Core 8 with EF Core, Dapper, FluentValidation, and MediatR, adhering to clean architecture principles and leveraging essential design patterns tailored to each module. My role involved crafting robust software architectures, enabling the application to meet diverse organizational demands while maintaining exceptional performance and reliability.",
            "summary": "Chabok is a modular app unifying organizational systems, providing seamless access to services like HR requests and financial management. As product owner and software engineer, I led module design, database architecture, and back-end development.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "C#",
                    "tag": "csharp"
                },
                {
                    "name": "ASP.NET Core",
                    "tag": "aspnetcore"
                },
                {
                    "name": "EF Core",
                    "tag": "efcore"
                },
                {
                    "name": "Dapper",
                    "tag": "dapper"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "Redis",
                    "tag": "redis"
                },
                {
                    "name": "Clean Architecture",
                    "tag": "cleanarch"
                },
                {
                    "name": "Modular Monolith",
                    "tag": "modularmonolith"
                },
                {
                    "name": "MediatR",
                    "tag": ""
                },
                {
                    "name": "Fluent Validation",
                    "tag": ""
                },
                {
                    "name": "Mapster",
                    "tag": ""
                },
                {
                    "name": "Serilog",
                    "tag": ""
                },
                {
                    "name": "Open Telemetry",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                }
            ]
        },
        {
            "id": 81,
            "projectName": "Reception Assistant",
            "description": "Reception Assistant is an innovative application designed to improve efficiency and customer satisfaction at dealership after-sales service centers. It offers a range of features, including tracking customer history, analyzing their behavior through AI, and providing insights into their satisfaction levels and any issues encountered. Additionally, it generates personalized customer personas and offers counseling services to centers on topics like increasing Customer Satisfaction Index (CSI). As part of the development team, my co-worker and I collaboratively designed the system and database architecture. Given the large volume of data and the need for high performance, we selected SQL Server as the database solution and adopted a database-first approach, using Prisma to scaffold and implement database interactions. My contributions focused primarily on the back-end, where I utilized NestJS to build a robust, secure, and scalable framework. To ensure application security, we implemented JWT for authentication and authorization, adhering to best practices for session management and using tools like Passport, Helmet, and Pino for security, logging, and performance monitoring. The application also includes advanced features like XLSX support for report generation and data uploading and an IPG integration to handle subscription purchases seamlessly. Each agency is required to subscribe to use the app, adding a layer of financial management to the system. Upon releasing the first version, I transitioned into the role of product owner, driving the vision and further development of the application. While my primary focus was on back-end and database development, I also contributed to the front-end implementation, ensuring the application delivered a seamless and efficient experience for its users.",
            "summary": "Reception Assistant is a dealership application aiding receptionists with customer history tracking, behavior analysis, satisfaction insights, and counseling services. I contributed as a back-end developer and database designer, ensuring a secure, scalable, and high-performance system.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "Redis",
                    "tag": "redis"
                },
                {
                    "name": "NodeJS",
                    "tag": "node"
                },
                {
                    "name": "TypeScript",
                    "tag": "ts"
                },
                {
                    "name": "NestJS",
                    "tag": "nest"
                },
                {
                    "name": "ExpressJS",
                    "tag": "express"
                },
                {
                    "name": "Prisma",
                    "tag": "prisma"
                },
                {
                    "name": "React",
                    "tag": "react"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "React Hook Form",
                    "tag": "rhf"
                },
                {
                    "name": "SASS",
                    "tag": "sass"
                },
                {
                    "name": "SIP.js",
                    "tag": "sip"
                },
                {
                    "name": "VOIP",
                    "tag": ""
                },
                {
                    "name": "Axios",
                    "tag": ""
                },
                {
                    "name": "Passport",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                },
                {
                    "name": "xlsx",
                    "tag": ""
                },
                {
                    "name": "Pino",
                    "tag": ""
                },
                {
                    "name": "Throttler",
                    "tag": ""
                },
                {
                    "name": "Swagger",
                    "tag": ""
                },
                {
                    "name": "Ag-grid",
                    "tag": ""
                },
                {
                    "name": "Echarts",
                    "tag": ""
                },
                {
                    "name": "Swiper",
                    "tag": ""
                }
            ]
        },
        {
            "id": 86,
            "projectName": "Sales Service Inspection Dashboard",
            "description": "Sales Service Inspection Dashboard is designed to deliver valuable insights from inspections conducted in the automotive industry. The application provides various charts and data to different roles, including companies and dealerships. Companies can view dealership performance in terms of selling strategies, processes, and industry comparison scores. Dealerships, on the other hand, can log into their accounts to access their inspection results, customer satisfaction ratings, and other performance metrics. The admin panel allows for user management, report uploads, and settings adjustments. As a product owner and back-end developer, I was responsible for designing the database and the front-end interface. I also implemented dynamic services in ASP.NET Core, utilizing stored procedures to handle database operations, ensuring seamless performance and a simple yet effective back-end experience.",
            "summary": "Data-driven application for the automotive industry, providing detailed inspection results and comparisons for companies and dealerships. It offers various charts and insights into selling strategies, industry performance, and customer satisfaction.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "C#",
                    "tag": "csharp"
                },
                {
                    "name": "ASP.NET Core",
                    "tag": "aspnetcore"
                },
                {
                    "name": "Dapper",
                    "tag": "dapper"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "React.js",
                    "tag": "react"
                },
                {
                    "name": "Typescript",
                    "tag": "ts"
                },
                {
                    "name": "Tanstack Query",
                    "tag": "tq"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "Auto-mapper",
                    "tag": ""
                },
                {
                    "name": "Serilog",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                }
            ]
        },
        {
            "id": 80,
            "projectName": "Sales Service Inspection",
            "description": "The sales service inspection application is an upgraded version of the after-sales service inspection system, tailored to provide a more efficient and modern solution for inspection workflows. Building upon the foundation of its predecessor, this project introduced upgraded packages, ensuring improved performance and maintainability. The user interface was completely redesigned to offer a modern and intuitive experience, enhancing usability for inspectors and stakeholders alike. Significant refactoring was carried out on both the front-end and back-end codebases, improving readability, scalability, and adherence to best practices. The database design was also renewed to support new features and provide optimized data handling and retrieval. This project demonstrates a commitment to continuous improvement and the ability to evolve an existing system into a more robust and user-friendly application.",
            "summary": "A sales service inspection application built as an enhanced version of the after-sales service inspection system, featuring upgraded packages, a refreshed UI, refactored front-end and back-end code, and a renewed database design.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "NextJS",
                    "tag": "next"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "Redux Toolkit",
                    "tag": "redux"
                },
                {
                    "name": "React Hook Form",
                    "tag": "rhf"
                },
                {
                    "name": "TypeScript",
                    "tag": "ts"
                },
                {
                    "name": "SASS",
                    "tag": "sass"
                },
                {
                    "name": "NodeJS",
                    "tag": "node"
                },
                {
                    "name": "ExpressJS",
                    "tag": "express"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "Emotion",
                    "tag": ""
                },
                {
                    "name": "Ag-grid",
                    "tag": ""
                },
                {
                    "name": "Axios",
                    "tag": ""
                },
                {
                    "name": "Framer-motion",
                    "tag": ""
                },
                {
                    "name": "Redux-persist",
                    "tag": ""
                },
                {
                    "name": "Archiver",
                    "tag": ""
                },
                {
                    "name": "Exceljs",
                    "tag": ""
                },
                {
                    "name": "Helmet",
                    "tag": ""
                },
                {
                    "name": "Joi",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                },
                {
                    "name": "Morgan",
                    "tag": ""
                },
                {
                    "name": "Winston",
                    "tag": ""
                },
                {
                    "name": "mssql",
                    "tag": ""
                },
                {
                    "name": "Node-cron",
                    "tag": ""
                },
                {
                    "name": "Puppeteer",
                    "tag": ""
                },
                {
                    "name": "xlsx",
                    "tag": ""
                }
            ]
        },
        {
            "id": 79,
            "projectName": "Motorcycle And Machinery After-sales Inspection Dashboards",
            "description": "The motorcycle and machinery after-sales inspection dashboard applications were designed to provide a comprehensive overview of inspection data accumulated over years. These applications present data through a variety of dynamic and visually engaging charts, offering actionable insights for stakeholders. My co-worker and I leveraged ECharts to implement a diverse range of chart types, ensuring that the visualizations effectively communicated the inspection trends and results. The applications were developed using modern web technologies, including React, Vite, and Redux Toolkit Query, to create a highly responsive and performant user interface. The combination of these tools allowed us to build a fast and efficient application with a great user experience, enabling users to navigate through extensive datasets effortlessly. This project highlights the ability to design and implement data-driven dashboard applications tailored to meet industry needs.",
            "summary": "Comprehensive motorcycle and machinery after-sales inspection dashboard applications, offering years of inspection data presented through dynamic charts. Built with React, Vite, Redux Toolkit Query, and ECharts to deliver a fast, efficient, and visually appealing user experience.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "React",
                    "tag": "react"
                },
                {
                    "name": "TypeScript",
                    "tag": "ts"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "React Hook Form",
                    "tag": "rhf"
                },
                {
                    "name": "React Router Dom",
                    "tag": "rrd"
                },
                {
                    "name": "Redux Toolkit Query",
                    "tag": "redux"
                },
                {
                    "name": "Echarts",
                    "tag": ""
                },
                {
                    "name": "Ag-grid",
                    "tag": ""
                },
                {
                    "name": "Axios",
                    "tag": ""
                },
                {
                    "name": "Emotion",
                    "tag": ""
                },
                {
                    "name": "Framer-motion",
                    "tag": ""
                },
                {
                    "name": "Vite",
                    "tag": ""
                },
                {
                    "name": "Redux-persist",
                    "tag": ""
                }
            ]
        },
        {
            "id": 78,
            "projectName": "After Sales Service Inspection",
            "description": "This after-sales service inspection application was specifically designed for the automotive industry to enhance and streamline the vehicle inspection process. It provides a dynamic checklist system with various question types, enabling it to adapt to the unique requirements of vehicle inspections. The application prioritizes user experience, allowing inspectors to efficiently submit their answers with minimal effort. It includes a scheduling system to organize and manage inspection appointments, automated PDF outputs for dealerships and inspectors, and comprehensive reporting capabilities that provide actionable insights from completed inspections. Developed as a collaborative effort, one co-worker managed the database design, while another assisted with both front-end and back-end development. My contributions encompassed implementing key functionalities on both the back-end and front-end, ensuring a smooth and cohesive system. This application revolutionized the inspection workflow for the automotive industry, providing a more efficient and user-friendly solution.",
            "summary": "An after-sales service inspection application tailored for the automotive industry, featuring dynamic checklists, advanced reporting, scheduling, and PDF output capabilities. Contributed as both a back-end and front-end developer.",
            "repositoryLink": "",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "NextJS",
                    "tag": "next"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "Redux Toolkit",
                    "tag": "redux"
                },
                {
                    "name": "React Hook Form",
                    "tag": "rhf"
                },
                {
                    "name": "TypeScript",
                    "tag": "ts"
                },
                {
                    "name": "SASS",
                    "tag": "sass"
                },
                {
                    "name": "NodeJS",
                    "tag": "node"
                },
                {
                    "name": "ExpressJS",
                    "tag": "express"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "Emotion",
                    "tag": ""
                },
                {
                    "name": "Ag-grid",
                    "tag": ""
                },
                {
                    "name": "Axios",
                    "tag": ""
                },
                {
                    "name": "Framer-motion",
                    "tag": ""
                },
                {
                    "name": "Redux-persist",
                    "tag": ""
                },
                {
                    "name": "Archiver",
                    "tag": ""
                },
                {
                    "name": "Exceljs",
                    "tag": ""
                },
                {
                    "name": "Helmet",
                    "tag": ""
                },
                {
                    "name": "Joi",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                },
                {
                    "name": "Morgan",
                    "tag": ""
                },
                {
                    "name": "Winston",
                    "tag": ""
                },
                {
                    "name": "mssql",
                    "tag": ""
                },
                {
                    "name": "Node-cron",
                    "tag": ""
                },
                {
                    "name": "Puppeteer",
                    "tag": ""
                },
                {
                    "name": "xlsx",
                    "tag": ""
                }
            ]
        },
        {
            "id": 77,
            "projectName": "Mock API For Teaching",
            "description": "This project is a simple CRUD application developed in ASP.NET Core 8 to assist in teaching advanced concepts of TanStack Query. It employs the Minimal API approach, ensuring a lightweight and straightforward implementation. The application follows a service-based architecture, promoting clean separation of concerns and reusability of components. Instead of relying on a traditional database, the project uses the file system for data storage, reading and writing files directly to manage CRUD operations. This approach not only simplifies setup but also introduces an alternative method of handling data persistence. The application provides a clear and practical example of integrating a backend with advanced TanStack Query concepts, making it an effective teaching tool for exploring modern front-end and backend development patterns.",
            "summary": "A simple CRUD application built with ASP.NET Core 8, utilizing Minimal API, a service-based architecture, and file system operations for data storage, designed to support teaching advanced concepts of TanStack Query.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/MockAPIsForTeaching",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "C#",
                    "tag": "csharp"
                },
                {
                    "name": "ASP.NET Core",
                    "tag": "aspnetcore"
                },
                {
                    "name": "Service-based arch",
                    "tag": ""
                },
                {
                    "name": "Minimal-API",
                    "tag": ""
                }
            ]
        },
        {
            "id": 76,
            "projectName": "Modeling A Domain Using DDD Boilerplate",
            "description": "This project serves as a guide for modeling a domain using the principles of Domain-Driven Design (DDD). It is structured into two primary layers: the Domain layer, which encapsulates the core business logic and rules, and the Persistence layer, which handles data storage and retrieval. The implementation uses EF Core and SQL Server to manage the database interactions, ensuring efficient and reliable data access. By adhering to DDD concepts, this project emphasizes the importance of creating a domain model that reflects the business domain accurately. It demonstrates how to separate concerns, maintain a clear boundary between the domain and infrastructure, and design systems that are both flexible and aligned with business needs. This project is ideal for developers seeking to deepen their understanding of DDD and its practical implementation.",
            "summary": "A project demonstrating domain modeling using Domain-Driven Design (DDD), featuring two layers: Domain and Persistence. Built with EF Core and SQL Server, it showcases the practical application of DDD principles.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/EShop-DDD",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "C#",
                    "tag": "csharp"
                },
                {
                    "name": "EF Core",
                    "tag": "efcore"
                },
                {
                    "name": "SQL Server",
                    "tag": "mssql"
                },
                {
                    "name": "DDD",
                    "tag": ""
                },
                {
                    "name": ".NET 8",
                    "tag": ""
                }
            ]
        },
        {
            "id": 70,
            "projectName": "Experimental NestJS Back-end",
            "description": "This project is a user management module developed with NestJS, showcasing the implementation of CRUD (Create, Read, Update, Delete) functionalities. It includes robust authentication and authorization mechanisms to ensure secure access control. The application demonstrates best practices in backend development by integrating user authentication, role-based access control, and secure handling of sensitive data. To ensure reliability and functionality, comprehensive end-to-end (e2e) tests were written, covering all critical workflows and edge cases. This project highlights expertise in building secure and well-tested backend systems, reflecting proficiency in NestJS and software quality assurance.",
            "summary": "A user module built with NestJS featuring CRUD operations, authentication, and authorization, complemented by comprehensive end-to-end (e2e) testing.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/Experimental-NestJS-Project",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "NestJS",
                    "tag": "nest"
                },
                {
                    "name": "TypeScript",
                    "tag": "ts"
                },
                {
                    "name": "ExpressJS",
                    "tag": "express"
                },
                {
                    "name": "Prisma",
                    "tag": "prisma"
                },
                {
                    "name": "Postgre",
                    "tag": "postgre"
                },
                {
                    "name": "Passport",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                },
                {
                    "name": "class-validator",
                    "tag": ""
                },
                {
                    "name": "Jest",
                    "tag": ""
                },
                {
                    "name": "Pactum",
                    "tag": ""
                },
                {
                    "name": "Supertest",
                    "tag": ""
                }
            ]
        },
        {
            "id": 71,
            "projectName": "Clean architecture in NestJS",
            "description": "This NestJS boilerplate is a robust implementation of Clean Architecture, structured into four distinct layers: Application, Domain, Infrastructure, and Presentation. Designed to ensure maintainability and scalability, it provides an excellent foundation for modern web applications. The boilerplate uses TypeORM with MSSQL to handle database operations and integrates Passport to implement JWT-based authentication and authorization, ensuring secure access control. It incorporates class-validator for model binding and request body validation, enhancing data integrity. OpenAPI and Swagger are used to deliver comprehensive API documentation, making it easier for developers to understand and interact with the endpoints. Security is a key focus, with features such as throttling via Throttler to protect against DDoS attacks, response security headers implemented using Helmet, and compression for efficient API responses. Pino is used for structured and high-performance logging, facilitating effective monitoring and debugging. The boilerplate also includes health check endpoints to monitor the application's status. Jest is integrated to ensure high-quality code through comprehensive unit and integration testing. This boilerplate is open-source and free to use, offering developers a complete, ready-to-use framework for building secure, scalable, and well-documented applications with NestJS.",
            "summary": "A ready-to-use, open-source NestJS boilerplate implementing Clean Architecture with four layers: Application, Domain, Infrastructure, and Presentation. It includes robust features like JWT-based authentication, API documentation, and security enhancements.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/clean-arch-nestjs",
            "liveDemoLink": "",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "NestJS",
                    "tag": "nest"
                },
                {
                    "name": "TypeScript",
                    "tag": "ts"
                },
                {
                    "name": "ExpressJS",
                    "tag": "express"
                },
                {
                    "name": "TypeORM",
                    "tag": "typeorm"
                },
                {
                    "name": "Swagger",
                    "tag": ""
                },
                {
                    "name": "Passport",
                    "tag": ""
                },
                {
                    "name": "JWT",
                    "tag": ""
                },
                {
                    "name": "Class-validator",
                    "tag": ""
                },
                {
                    "name": "Jest",
                    "tag": ""
                },
                {
                    "name": "Throttler",
                    "tag": ""
                },
                {
                    "name": "mssql",
                    "tag": ""
                },
                {
                    "name": "Helmet",
                    "tag": ""
                },
                {
                    "name": "Pino",
                    "tag": ""
                }
            ]
        },
        {
            "id": 66,
            "projectName": "Google Drive App",
            "description": "This application simplifies sharing and embedding files stored on Google Drive. Users can effortlessly generate direct download links or embed codes for audio, video, and document files. The process is straightforward: right-click on any file in Google Drive, copy the shared link, paste it into the application, and click Generate. The app handles all the formatting and customization required to produce the desired output, ensuring compatibility across various platforms and use cases.This project is designed for content creators, educators, and professionals seeking to streamline file sharing and embedding workflows. It eliminates the hassle of manual adjustments, making it an essential tool for anyone leveraging Google Drive for their file-sharing needs.",
            "summary": "A user-friendly application that transforms shared Google Drive links into direct download links and embedded media formats (audio, video, and documents) with just a few clicks.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/Googledriveapp",
            "liveDemoLink": "https://googledriveapp.vercel.app/",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "JavaScript",
                    "tag": "js"
                },
                {
                    "name": "CSS",
                    "tag": "css"
                }
            ]
        },
        {
            "id": 67,
            "projectName": "Expense Tracker",
            "description": "This expense tracker provides a simple yet powerful solution for personal finance management. Users can easily add their income and expenses with just a few clicks, ensuring a seamless experience. The application organizes financial data into comprehensive lists, giving users a clear view of their financial history. Additionally, the app features visually appealing and interactive charts, offering insights into spending and saving patterns. Designed for simplicity and functionality, this tool is perfect for anyone looking to stay on top of their finances without unnecessary complexity.",
            "summary": "A straightforward expense tracker that allows users to efficiently manage their income and expenses, view detailed lists, and analyze financial data with interactive charts.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/expense-tracker",
            "liveDemoLink": "https://61cedbf89a1bec0f0a41de77--sharp-varahamihira-fb9bb8.netlify.app/",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "JavaScript",
                    "tag": "js"
                },
                {
                    "name": "React",
                    "tag": "react"
                },
                {
                    "name": "TailwindCSS",
                    "tag": "tailwind"
                },
                {
                    "name": "React Router Dom",
                    "tag": "rrd"
                },
                {
                    "name": "Headless UI",
                    "tag": ""
                },
                {
                    "name": "Victory",
                    "tag": ""
                }
            ]
        },
        {
            "id": 68,
            "projectName": "My First Portfolio",
            "description": "This portfolio serves as a comprehensive representation of my skills, experience, and knowledge in various technologies. It features a well-organized layout that includes sections for introducing myself, showcasing my projects, and detailing my technical expertise. The site is designed to make a strong impression on potential employers or collaborators by demonstrating my capabilities in web development.Built with modern tools and technologies, this portfolio reflects both my creative and technical skills, ensuring a user-friendly and visually engaging experience for visitors.",
            "summary": "A personal portfolio website designed to showcase technical expertise, introduce myself, and highlight professional achievements and projects.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/fr-port-react",
            "liveDemoLink": "https://hadibakhshi.ir",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "JavaScript",
                    "tag": "js"
                },
                {
                    "name": "React",
                    "tag": "react"
                },
                {
                    "name": "React Router Dom",
                    "tag": "rrd"
                },
                {
                    "name": "SASS",
                    "tag": "sass"
                },
                {
                    "name": "Axios",
                    "tag": ""
                },
                {
                    "name": "EmailJS",
                    "tag": ""
                },
                {
                    "name": "Framer-motion",
                    "tag": ""
                }
            ]
        },
        {
            "id": 69,
            "projectName": "Mahtisa Shop",
            "description": "Mahtisa Shop is a full-stack e-commerce application built using the MERN (MongoDB, Express, React, Node.js) stack. It showcases the complete functionality of an online store, including a backend system for managing user authentication, product data, and order processing. The application features a collection of popular shoes and sneakers, providing users with the ability to explore products, add items to their cart, create accounts, and simulate purchases. While it is not a real shop, it offers a fully interactive experience that demonstrates essential e-commerce features, such as secure backend integration, user management, and seamless cart functionality. Mahtisa Shop highlights both front-end and back-end development skills, emphasizing expertise in building robust, full-stack applications.",
            "summary": "An e-commerce MERN application offering a curated selection of popular shoes and sneakers, allowing users to browse, add items to their cart, create accounts, and submit purchases in a simulated shopping experience.",
            "repositoryLink": "https://github.com/Hadi-bakhshi/mahtisa-shopping",
            "liveDemoLink": "https://mahtisa-shopping-center.vercel.app/",
            "screenShotImage": "",
            "technologies": [
                {
                    "name": "JavaScript",
                    "tag": "js"
                },
                {
                    "name": "React",
                    "tag": "react"
                },
                {
                    "name": "React Router Dom",
                    "tag": "rrd"
                },
                {
                    "name": "Formik",
                    "tag": "formik"
                },
                {
                    "name": "Material-UI",
                    "tag": "mui"
                },
                {
                    "name": "ExpressJS",
                    "tag": "express"
                },
                {
                    "name": "NodeJS",
                    "tag": "node"
                },
                {
                    "name": "MongoDB",
                    "tag": "mongodb"
                },
                {
                    "name": "Axios",
                    "tag": ""
                },
                {
                    "name": "AOS",
                    "tag": ""
                },
                {
                    "name": "Yup",
                    "tag": ""
                },
                {
                    "name": "Swiper",
                    "tag": ""
                },
                {
                    "name": "Emotion",
                    "tag": ""
                }
            ]
        }
    ],
    "interestsAndHobbies": [
        {
            "id": 84,
            "name": "Traveling",
            "img": "/travel.svg",
            "bgColor": "#BFCCB5"
        },
        {
            "id": 86,
            "name": "Coding",
            "img": "/coding.svg",
            "bgColor": "#FDF7C3"
        },
        {
            "id": 87,
            "name": "Shopping",
            "img": "/shopping-cart.svg",
            "bgColor": "#E4D0D0"
        },
        {
            "id": 88,
            "name": "Movies/Series",
            "img": "/movie.svg",
            "bgColor": "#DFFFD8"
        },
        {
            "id": 89,
            "name": "Photography",
            "img": "/photography.svg",
            "bgColor": "#EDDBC7"
        },
        {
            "id": 90,
            "name": "Fitness/MMA",
            "img": "/gym.svg",
            "bgColor": "#DFD3C3"
        }
    ],
    "categories": [
        {
            "category": "Programming Language",
            "categoryId": 1
        },
        {
            "category": "Back-end Development",
            "categoryId": 2
        },
        {
            "category": "Front-end Development",
            "categoryId": 3
        },
        {
            "category": "Database Management",
            "categoryId": 4
        },
        {
            "category": "DevOps, Infrastructure & Workflow Automation",
            "categoryId": 5
        },
        {
            "category": "Architectural & Design Patterns",
            "categoryId": 6
        }
    ]
}